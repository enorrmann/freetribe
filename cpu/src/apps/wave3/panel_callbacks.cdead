/*----- Includes -----------------------------------------------------*/
#include "panel_callbacks.h"
#include <stdint.h>

#include "freetribe.h"

#include "keyboard.h"

#include "leaf-config.h"
#include "param_scale.h"
#include "svc_panel.h"

#include "gui_task.h"

#include "leaf.h"

#include "module_interface.h"
#include "panel_buttons.h"
#include "sysex_manager.h"

#include "common/sample.h"
//#include "globals.h"

static void _print_gui_param(int param, int value) {
    switch (param) {
    case SAMPLE_START_POINT:
        gui_post_param("Start ", value);
        break;
    case SAMPLE_PLAYBACK_RATE:
        gui_post_param("Rate  ", value);
        break;
    case SAMPLE_PARAM_QUALITY:
        gui_post_param("Qual  ", value);
        break;
    case SAMPLE_LOOP_POINT:
        gui_post_param("Loop  ", value);
        break;
    default:
        break;
    }
}

static void _set_filter_type(uint8_t filter_type) {

    switch (filter_type) {

    case FILTER_TYPE_LPF:
        ft_set_led(LED_LPF, 1);
        ft_set_led(LED_BPF, 0);
        ft_set_led(LED_HPF, 0);

        module_set_param_all_voices(PARAM_FILTER_TYPE,
                                    (1.0 / FILTER_TYPE_COUNT) * FILTER_TYPE_LPF);
        break;

    case FILTER_TYPE_BPF:
        ft_set_led(LED_LPF, 0);
        ft_set_led(LED_BPF, 1);
        ft_set_led(LED_HPF, 0);

        module_set_param_all_voices(PARAM_FILTER_TYPE,
                                    (1.0 / FILTER_TYPE_COUNT) * FILTER_TYPE_BPF);
        break;

    case FILTER_TYPE_HPF:
        ft_set_led(LED_LPF, 0);
        ft_set_led(LED_BPF, 0);
        ft_set_led(LED_HPF, 1);

        module_set_param_all_voices(PARAM_FILTER_TYPE,
                                    (1.0 / FILTER_TYPE_COUNT) * FILTER_TYPE_HPF);
        break;

    default:
        break;
    }
    gui_post_param("Fil Type: ", filter_type);
}

static void _set_mod_speed(uint32_t mod_speed) {

    switch (g_mod_type) {

    case MOD_AMP_LFO:
        module_set_param_all_voices(PARAM_AMP_LFO_SPEED,
                                    g_knob_cv_lut[mod_speed]);
        gui_post_param("A.LFO Spd: ", mod_speed);
        break;

    case MOD_FILTER_LFO:
        module_set_param_all_voices(PARAM_FILTER_LFO_SPEED,
                                    g_knob_cv_lut[mod_speed]);
        gui_post_param("F.LFO Spd: ", mod_speed);
        break;

    case MOD_PITCH_LFO:
        module_set_param_all_voices(PARAM_PITCH_LFO_SPEED,
                                    g_knob_cv_lut[mod_speed]);
        gui_post_param("P.LFO Spd: ", mod_speed);
        break;

    case MOD_MORPH_LFO:
        module_set_param_all_voices(PARAM_MORPH_LFO_SPEED,
                                    g_knob_cv_lut[mod_speed]);
        gui_post_param("M.LFO Spd: ", mod_speed);
        break;

    default:
        break;
    }
}

static void _set_mod_depth(uint32_t mod_depth) {

    switch (g_mod_type) {

    case MOD_AMP_LFO:
        module_set_param_all_voices(PARAM_AMP_LFO_DEPTH,
                                    g_knob_cv_lut[mod_depth]);
        gui_post_param("A.LFO Dpt: ", mod_depth);
        break;

    case MOD_FILTER_LFO:
        module_set_param_all_voices(PARAM_FILTER_LFO_DEPTH,
                                    g_knob_cv_lut[mod_depth]);
        gui_post_param("F.LFO Dpt: ", mod_depth);
        break;

    case MOD_PITCH_LFO:
        module_set_param_all_voices(PARAM_PITCH_LFO_DEPTH,
                                    g_knob_cv_lut[mod_depth]);
        gui_post_param("P.LFO Dpt: ", mod_depth);
        break;

    case MOD_MORPH_LFO:
        module_set_param_all_voices(PARAM_MORPH_LFO_DEPTH,
                                    g_knob_cv_lut[mod_depth]);
        gui_post_param("M.LFO Dpt: ", mod_depth);
        break;

    default:
        break;
    }
}

/**
 * @brief   Callback triggered by panel encoder events.
 *
 * @param[in]   index   Index of encoder.
 * @param[in]   value   Value of encoder.
 */
void encoder_callback(uint8_t index, uint8_t value) {

    static uint8_t cutoff = DEFAULT_CUTOFF;
    static int8_t osc_type = DEFAULT_OSC_TYPE;
    static int8_t mod_type;
    static int32_t morph_amount, amt = 0;

    switch (index) {

    case ENCODER_CUTOFF:

        if (value == 0x01) {

            if (cutoff < 0x7f) {
                cutoff++;
            }

        } else {
            if (cutoff > 0) {
                cutoff--;
            }
        }
        module_set_param_all_voices(PARAM_FILTER_BASE_CUTOFF, g_midi_pitch_cv_lut[cutoff]);
        gui_post_param("Cutoff: ", cutoff);

        break;

    case ENCODER_OSC:

        if (value == 0x01) {
            osc_type++;
            if (osc_type > OSC_TYPE_MAX) {
                osc_type = 0;
            }
        } else {
            osc_type--;
            if (osc_type < 0) {
                osc_type = OSC_TYPE_MAX;
            }
        }
        if (g_shift_held) {
            module_set_param_all_voices(PARAM_OSC_2_TYPE,
                                        (1.0 / OSC_TYPE_COUNT) * osc_type);
            gui_post_param("Osc 2 Type: ", osc_type);
        } else {
            module_set_param_all_voices(PARAM_OSC_TYPE,
                                        (1.0 / OSC_TYPE_COUNT) * osc_type);
            gui_post_param("Osc 1 Type: ", osc_type);
        }

        break;

    case ENCODER_MOD:

        if (value == 0x01) {
            mod_type++;
            if (mod_type > MOD_TYPE_MAX) {
                mod_type = 0;
            }
        } else {
            mod_type--;
            if (mod_type < 0) {
                mod_type = MOD_TYPE_MAX;
            }
        }

        g_mod_type = mod_type;
        gui_post_param("Mod Type: ", mod_type);

        break;

    case ENCODER_MAIN:
        int amt = 1;
        if (g_button_bar_1_held) {
            amt = 10;
        }
        if (g_button_bar_2_held) {
            amt = 100;
        }
        if (g_button_bar_3_held) {
            amt = 1000;
        }
        if (g_button_bar_4_held) {
            amt = 10000;
        }

        if (value == 0x01) {
            g_current_editing_sample_parameter_value[g_current_editing_sample_parameter] += amt;
            /*if (g_current_editing_sample_parameter_value > 4096) { // magic
            number g_current_editing_sample_parameter_value = 4096;
            }*/
        } else {
            g_current_editing_sample_parameter_value[g_current_editing_sample_parameter] -= amt;
            if (g_current_editing_sample_parameter_value[g_current_editing_sample_parameter] < 0) {
                g_current_editing_sample_parameter_value[g_current_editing_sample_parameter] = 0;
            }
        }
        int sample_number = 0; // only one sample for now

        _print_gui_param(g_current_editing_sample_parameter,g_current_editing_sample_parameter_value[g_current_editing_sample_parameter]);
        module_set_param_sample(sample_number,
                                g_current_editing_sample_parameter,
                                g_current_editing_sample_parameter_value[g_current_editing_sample_parameter]);
        // only voice 0 for now
        break;

    default:
        break;
    }
}

/**
 * @brief   Callback triggered by panel knob events.
 *
 * @param[in]   index   Index of knob.
 * @param[in]   value   Value of knob.
 */
void knob_callback(uint8_t index, uint8_t value) {

    switch (index) {

    case KNOB_PITCH:
        //  if osc type is unison attenuate unison detune 
        if (module_get_param(PARAM_UNISON) == 1) {
            module_set_param_all_voices(PARAM_TUNE, 1 - (value * 0.02f / 255.0f));
            gui_post_param("U. Detune: ", value);
        } else {
            module_set_param_all_voices(PARAM_TUNE, g_octave_tune_lut[value]); 
            //module_set_param_all_voices(PARAM_TUNE, 1 - (value * 1.5f / 255.0f));  // sync testing
            gui_post_param("Pitch: ", value);

        }

        break;

    case KNOB_ATTACK:
        if (g_shift_held) {

            if (g_amp_eg) {
                module_set_param_all_voices(PARAM_AMP_ENV_SUSTAIN,
                                            g_knob_cv_lut[value]);
                gui_post_param("Amp Sus: ", value);

            } else {
                module_set_param_all_voices(PARAM_FILTER_ENV_SUSTAIN,
                                            g_knob_cv_lut[value]);

                gui_post_param("Fil Sus: ", value);
            }

        } else {
            if (g_amp_eg) {
                module_set_param_all_voices(PARAM_AMP_ENV_ATTACK,
                                            g_knob_cv_lut[value]);
                gui_post_param("Amp Atk: ", value);

            } else {
                module_set_param_all_voices(PARAM_FILTER_ENV_ATTACK,
                                            g_knob_cv_lut[value]);
                gui_post_param("Fil Atk: ", value);
            }
        }
        break;

    case KNOB_DECAY:
        if (g_shift_held) {

            if (g_amp_eg) {
                module_set_param_all_voices(PARAM_AMP_ENV_RELEASE,
                                            g_knob_cv_lut[value]);
                gui_post_param("Amp Rel: ", value);

            } else {
                module_set_param_all_voices(PARAM_FILTER_ENV_RELEASE,
                                            g_knob_cv_lut[value]);

                gui_post_param("Fil Rel: ", value);
            }

        } else {
            if (g_amp_eg) {
                module_set_param_all_voices(PARAM_AMP_ENV_DECAY,
                                            g_knob_cv_lut[value]);
                gui_post_param("Amp Dec: ", value);

            } else {
                module_set_param_all_voices(PARAM_FILTER_ENV_DECAY,
                                            g_knob_cv_lut[value]);
                gui_post_param("Fil Dec: ", value);
            }
        }
        break;

    case KNOB_LEVEL:
        if (g_shift_held) {
            module_set_param_all_voices(PARAM_AMP_2_LEVEL, g_amp_cv_lut[value]);
            gui_post_param("Amp2 Level: ", value);
            
        } else {
            module_set_param_all_voices(PARAM_AMP_LEVEL, g_amp_cv_lut[value]);
            gui_post_param("Amp Level: ", value);
            
        }
        break;

    case KNOB_RESONANCE:
        module_set_param_all_voices(PARAM_RES, g_knob_cv_lut[value]);
        gui_post_param("Resonance: ", value);
        break;

    case KNOB_EG_INT:
        module_set_param_all_voices(PARAM_FILTER_ENV_DEPTH,
                                    g_knob_cv_lut[value]);
        gui_post_param("EG Depth: ", value);
        break;

    case KNOB_MOD_DEPTH:
        _set_mod_depth(value);
        break;

    case KNOB_MOD_SPEED:
        _set_mod_speed(value);
        break;

    default:
        break;
    }
}


/**
 * @brief   Callback triggered by panel button events.
 *
 * @param[in]   index   Index of button.
 * @param[in]   state   State of button.
 */
void button_callback(uint8_t index, bool state) {

    switch (index) {
    case BUTTON_EXIT:
        if (state == 1) {
            ft_shutdown();
        }
        break;
    case BUTTON_RECORD:
        // donesnt matter wich voice, send voice 0
        ft_set_module_param(0, SAMPLE_RECORD_START, 1);
        loaded_samples = 0;
        gui_post_param("recording ", 1);
        g_menu_held = state;
        break;

    case BUTTON_STOP:
        // donesnt matter wich voice, send voice 0
        ft_set_module_param(0, SAMPLE_RECORD_STOP, 1);
        gui_post_param("recording ", 0);
        g_menu_held = state;
        break;

    case BUTTON_SHIFT:
        g_shift_held = state;
        break;

    case BUTTON_BAR_1:
        g_button_bar_1_held = state;
        break;
    case BUTTON_BAR_2:
        g_button_bar_2_held = state;
        break;
    case BUTTON_BAR_3:
        g_button_bar_3_held = state;
        break;
    case BUTTON_BAR_4:
        g_button_bar_4_held = state;
        break;

    case BUTTON_AMP_EG:
        if (state) {

            if (g_shift_held) {

                g_retrigger = !g_retrigger;
                module_set_param_all_voices(PARAM_RETRIGGER, g_retrigger);
                gui_post_param("Env Retrig: ", g_retrigger);

            } else {
                g_amp_eg = !g_amp_eg;
                ft_set_led(LED_AMP_EG, g_amp_eg);
            }
        }
        break;

    case BUTTON_LPF:
        if (state) {
            _set_filter_type(FILTER_TYPE_LPF);
        }
        break;

    case BUTTON_BPF:
        if (state) {
            _set_filter_type(FILTER_TYPE_BPF);
        }
        break;

    case BUTTON_HPF:
        if (state) {
            _set_filter_type(FILTER_TYPE_HPF);
        }
        break;

    case BUTTON_FORWARD:
        if (state) {
            if (g_current_editing_sample_parameter < SAMPLE_PARAM_COUNT - 1) {
                g_current_editing_sample_parameter++;
            }
            // gui_post_param("SampPrm  :
            // ",g_current_editing_sample_parameter_value[g_current_editing_sample_parameter]);
            _print_gui_param(g_current_editing_sample_parameter,g_current_editing_sample_parameter_value[g_current_editing_sample_parameter]);
        }
        break;
    case BUTTON_BACK:
        if (state) {
            if (g_current_editing_sample_parameter > 0) {
                g_current_editing_sample_parameter--;
            }

            // gui_post_param("SampPrm  : ",
            // g_current_editing_sample_parameter_value
            // [g_current_editing_sample_parameter]);
            _print_gui_param(g_current_editing_sample_parameter,
                             g_current_editing_sample_parameter_value
                                 [g_current_editing_sample_parameter]);
        }
        break;

    default:
        break;
    }
}